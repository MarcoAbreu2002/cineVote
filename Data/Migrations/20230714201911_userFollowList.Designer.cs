// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace cineVote.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230714201911_userFollowList")]
    partial class userFollowList
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("cineVote.Models.Domain.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CategoryId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<int?>("Competition_Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CategoryDescription");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CategoryName");

                    b.HasKey("CategoryId");

                    b.HasIndex("Competition_Id");

                    b.ToTable("tblCategory");
                });

            modelBuilder.Entity("cineVote.Models.Domain.CategoryNominee", b =>
                {
                    b.Property<int>("CategoryNomineeKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryNomineeKey"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryId");

                    b.Property<int>("NomineeId")
                        .HasColumnType("int")
                        .HasColumnName("NomineeId");

                    b.HasKey("CategoryNomineeKey");

                    b.HasIndex("CategoryId");

                    b.HasIndex("NomineeId");

                    b.ToTable("tblCategoryNominee");
                });

            modelBuilder.Entity("cineVote.Models.Domain.Comments", b =>
                {
                    b.Property<int>("CommentsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CommentsId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentsId"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.Property<int>("PostsId")
                        .HasColumnType("int")
                        .HasColumnName("PostsId");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("userName");

                    b.HasKey("CommentsId");

                    b.HasIndex("PostsId");

                    b.HasIndex("UserId");

                    b.ToTable("tblComments");
                });

            modelBuilder.Entity("cineVote.Models.Domain.Competition", b =>
                {
                    b.Property<int>("Competition_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Competition_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Competition_Id"), 1L, 1);

                    b.Property<string>("AdminId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("AdminId");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryId");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("EndDate");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit")
                        .HasColumnName("IsPublic");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartDate");

                    b.HasKey("Competition_Id");

                    b.HasIndex("AdminId");

                    b.ToTable("tblCompetition");
                });

            modelBuilder.Entity("cineVote.Models.Domain.CompetitionCategory", b =>
                {
                    b.Property<int>("CompetitionCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CompetitionCategoryId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompetitionCategoryId"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryId");

                    b.Property<int>("Competition_Id")
                        .HasColumnType("int")
                        .HasColumnName("Competition_Id");

                    b.Property<int?>("Competition_Id1")
                        .HasColumnType("int");

                    b.HasKey("CompetitionCategoryId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Competition_Id1");

                    b.ToTable("tblCompetitionCategory");
                });

            modelBuilder.Entity("cineVote.Models.Domain.Nominee", b =>
                {
                    b.Property<int>("NomineeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NomineeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NomineeId"), 1L, 1);

                    b.Property<int?>("Competition_Id")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FullName");

                    b.Property<string>("ProfilePictureURL")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ProfilePictureURL");

                    b.Property<int>("TMDBId")
                        .HasColumnType("int")
                        .HasColumnName("TMDBId");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.HasKey("NomineeId");

                    b.HasIndex("Competition_Id");

                    b.ToTable("tblNominee");
                });

            modelBuilder.Entity("cineVote.Models.Domain.NomineeCompetition", b =>
                {
                    b.Property<int>("NomineeCompetitionKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NomineeCompetitionKey"), 1L, 1);

                    b.Property<int>("Competition_Id")
                        .HasColumnType("int")
                        .HasColumnName("Competition_Id");

                    b.Property<int?>("Competition_Id1")
                        .HasColumnType("int");

                    b.Property<int>("NomineeId")
                        .HasColumnType("int")
                        .HasColumnName("NomineeId");

                    b.HasKey("NomineeCompetitionKey");

                    b.HasIndex("Competition_Id1");

                    b.HasIndex("NomineeId");

                    b.ToTable("tblNomineeCompetition");
                });

            modelBuilder.Entity("cineVote.Models.Domain.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("notificationId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("int")
                        .HasColumnName("SubscriptionId");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("isRead")
                        .HasColumnType("bit")
                        .HasColumnName("isRead");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("userName");

                    b.HasKey("NotificationId");

                    b.HasIndex("SubscriptionId");

                    b.HasIndex("UserId");

                    b.ToTable("tblNotification");
                });

            modelBuilder.Entity("cineVote.Models.Domain.Person", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Email1");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FirstName");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("imageUrl");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit")
                        .HasColumnName("IsAdmin");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LastName");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Password");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("PersonId");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("cineVote.Models.Domain.Posts", b =>
                {
                    b.Property<int>("PostsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PostsId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostsId"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Title");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("userName");

                    b.HasKey("PostsId");

                    b.HasIndex("UserId");

                    b.ToTable("tblPosts");
                });

            modelBuilder.Entity("cineVote.Models.Domain.Result", b =>
                {
                    b.Property<int>("ResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ResultID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResultId"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryId");

                    b.Property<int>("Competition_Id")
                        .HasColumnType("int")
                        .HasColumnName("Competition_Id");

                    b.Property<int?>("Competition_Id1")
                        .HasColumnType("int");

                    b.Property<int>("FirstPlaceId")
                        .HasColumnType("int")
                        .HasColumnName("FirstPlaceId");

                    b.Property<int?>("SecondPlaceId")
                        .HasColumnType("int")
                        .HasColumnName("SecondPlaceId");

                    b.Property<int?>("ThirdPlaceId")
                        .HasColumnType("int")
                        .HasColumnName("ThirdPlaceId");

                    b.Property<int>("TotalParticipants")
                        .HasColumnType("int")
                        .HasColumnName("TotalParticipants");

                    b.HasKey("ResultId");

                    b.HasIndex("Competition_Id1");

                    b.HasIndex("FirstPlaceId");

                    b.HasIndex("SecondPlaceId");

                    b.HasIndex("ThirdPlaceId");

                    b.ToTable("tblResult");
                });

            modelBuilder.Entity("cineVote.Models.Domain.Subscription", b =>
                {
                    b.Property<int>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SubscriptionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscriptionId"), 1L, 1);

                    b.Property<int>("Competition_Id")
                        .HasColumnType("int")
                        .HasColumnName("Competition_Id");

                    b.Property<int?>("Competition_Id1")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Subscription_name");

                    b.Property<int?>("ResultId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("VoteId")
                        .HasColumnType("int")
                        .HasColumnName("VoteId");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("userName");

                    b.HasKey("SubscriptionId");

                    b.HasIndex("Competition_Id1");

                    b.HasIndex("ResultId");

                    b.HasIndex("UserId");

                    b.ToTable("tblSubscription");
                });

            modelBuilder.Entity("cineVote.Models.Domain.SubscriptionNotifications", b =>
                {
                    b.Property<int>("SubscriptionNotificationsKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscriptionNotificationsKey"), 1L, 1);

                    b.Property<int>("NotificationId")
                        .HasColumnType("int")
                        .HasColumnName("NotificationId");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("int")
                        .HasColumnName("SubscriptionId");

                    b.HasKey("SubscriptionNotificationsKey");

                    b.HasIndex("NotificationId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("tblSubscriptionNotifications");
                });

            modelBuilder.Entity("cineVote.Models.Domain.UserRelationship", b =>
                {
                    b.Property<int>("UserRelationshipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserRelationshipId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRelationshipId"), 1L, 1);

                    b.Property<string>("FolloweeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FollowerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserRelationshipId");

                    b.HasIndex("FolloweeId");

                    b.HasIndex("FollowerId");

                    b.ToTable("tblUserRelationship");
                });

            modelBuilder.Entity("cineVote.Models.Domain.Vote", b =>
                {
                    b.Property<int>("VoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VoteId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VoteId"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryId");

                    b.Property<int>("NomineeId")
                        .HasColumnType("int")
                        .HasColumnName("NomineeId");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("int")
                        .HasColumnName("SubscriptionId");

                    b.Property<int?>("SubscriptionId1")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("userName");

                    b.HasKey("VoteId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("NomineeId");

                    b.HasIndex("SubscriptionId1");

                    b.HasIndex("UserId");

                    b.ToTable("tblVotes");
                });

            modelBuilder.Entity("cineVote.Models.Domain.VoteSubscription", b =>
                {
                    b.Property<int>("VoteSubscriptionKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VoteSubscriptionKey"), 1L, 1);

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("int")
                        .HasColumnName("SubscriptionId");

                    b.Property<int>("VoteId")
                        .HasColumnType("int")
                        .HasColumnName("VoteId");

                    b.HasKey("VoteSubscriptionKey");

                    b.HasIndex("SubscriptionId");

                    b.HasIndex("VoteId");

                    b.ToTable("tblVoteSubscription");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("cineVote.Models.Domain.Admin", b =>
                {
                    b.HasBaseType("cineVote.Models.Domain.Person");

                    b.Property<int>("Competition_Id")
                        .HasColumnType("int")
                        .HasColumnName("Competition_Id");

                    b.ToTable("tblAdmin");
                });

            modelBuilder.Entity("cineVote.Models.Domain.User", b =>
                {
                    b.HasBaseType("cineVote.Models.Domain.Person");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("int")
                        .HasColumnName("SubscriptionId");

                    b.ToTable("tblUser");
                });

            modelBuilder.Entity("cineVote.Models.Domain.Category", b =>
                {
                    b.HasOne("cineVote.Models.Domain.Competition", null)
                        .WithMany("Categories")
                        .HasForeignKey("Competition_Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("cineVote.Models.Domain.CategoryNominee", b =>
                {
                    b.HasOne("cineVote.Models.Domain.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("cineVote.Models.Domain.Nominee", "Nominee")
                        .WithMany("CategoryNominees")
                        .HasForeignKey("NomineeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Nominee");
                });

            modelBuilder.Entity("cineVote.Models.Domain.Comments", b =>
                {
                    b.HasOne("cineVote.Models.Domain.Posts", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("cineVote.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("cineVote.Models.Domain.Competition", b =>
                {
                    b.HasOne("cineVote.Models.Domain.Admin", null)
                        .WithMany("competitions")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("cineVote.Models.Domain.CompetitionCategory", b =>
                {
                    b.HasOne("cineVote.Models.Domain.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("cineVote.Models.Domain.Competition", "Competition")
                        .WithMany()
                        .HasForeignKey("Competition_Id1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");

                    b.Navigation("Competition");
                });

            modelBuilder.Entity("cineVote.Models.Domain.Nominee", b =>
                {
                    b.HasOne("cineVote.Models.Domain.Competition", null)
                        .WithMany("Nominees")
                        .HasForeignKey("Competition_Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("cineVote.Models.Domain.NomineeCompetition", b =>
                {
                    b.HasOne("cineVote.Models.Domain.Competition", "Competition")
                        .WithMany()
                        .HasForeignKey("Competition_Id1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("cineVote.Models.Domain.Nominee", "Nominee")
                        .WithMany("NomineeCompetitions")
                        .HasForeignKey("NomineeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Competition");

                    b.Navigation("Nominee");
                });

            modelBuilder.Entity("cineVote.Models.Domain.Notification", b =>
                {
                    b.HasOne("cineVote.Models.Domain.Subscription", "Subscription")
                        .WithMany()
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("cineVote.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Subscription");

                    b.Navigation("User");
                });

            modelBuilder.Entity("cineVote.Models.Domain.Person", b =>
                {
                    b.HasOne("cineVote.Models.Domain.User", null)
                        .WithMany("followings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("cineVote.Models.Domain.Posts", b =>
                {
                    b.HasOne("cineVote.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("cineVote.Models.Domain.Result", b =>
                {
                    b.HasOne("cineVote.Models.Domain.Competition", "Competition")
                        .WithMany()
                        .HasForeignKey("Competition_Id1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("cineVote.Models.Domain.Nominee", "FirstPlace")
                        .WithMany()
                        .HasForeignKey("FirstPlaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("cineVote.Models.Domain.Nominee", "SecondPlace")
                        .WithMany()
                        .HasForeignKey("SecondPlaceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("cineVote.Models.Domain.Nominee", "ThirdPlace")
                        .WithMany()
                        .HasForeignKey("ThirdPlaceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Competition");

                    b.Navigation("FirstPlace");

                    b.Navigation("SecondPlace");

                    b.Navigation("ThirdPlace");
                });

            modelBuilder.Entity("cineVote.Models.Domain.Subscription", b =>
                {
                    b.HasOne("cineVote.Models.Domain.Competition", "Competition")
                        .WithMany()
                        .HasForeignKey("Competition_Id1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("cineVote.Models.Domain.Result", "Result")
                        .WithMany()
                        .HasForeignKey("ResultId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("cineVote.Models.Domain.User", "User")
                        .WithMany("subscritions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Competition");

                    b.Navigation("Result");

                    b.Navigation("User");
                });

            modelBuilder.Entity("cineVote.Models.Domain.SubscriptionNotifications", b =>
                {
                    b.HasOne("cineVote.Models.Domain.Notification", "Notification")
                        .WithMany("SubscriptionNotifications")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("cineVote.Models.Domain.Subscription", "Subscription")
                        .WithMany("SubscriptionNotifications")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("cineVote.Models.Domain.UserRelationship", b =>
                {
                    b.HasOne("cineVote.Models.Domain.Person", "Followee")
                        .WithMany()
                        .HasForeignKey("FolloweeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("cineVote.Models.Domain.Person", "Follower")
                        .WithMany()
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Followee");

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("cineVote.Models.Domain.Vote", b =>
                {
                    b.HasOne("cineVote.Models.Domain.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("cineVote.Models.Domain.Nominee", "Nominee")
                        .WithMany()
                        .HasForeignKey("NomineeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("cineVote.Models.Domain.Subscription", "Subscription")
                        .WithMany()
                        .HasForeignKey("SubscriptionId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("cineVote.Models.Domain.User", "User")
                        .WithMany("votes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Nominee");

                    b.Navigation("Subscription");

                    b.Navigation("User");
                });

            modelBuilder.Entity("cineVote.Models.Domain.VoteSubscription", b =>
                {
                    b.HasOne("cineVote.Models.Domain.Subscription", "Subscription")
                        .WithMany()
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("cineVote.Models.Domain.Vote", "Vote")
                        .WithMany()
                        .HasForeignKey("VoteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Subscription");

                    b.Navigation("Vote");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("cineVote.Models.Domain.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("cineVote.Models.Domain.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("cineVote.Models.Domain.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("cineVote.Models.Domain.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("cineVote.Models.Domain.Admin", b =>
                {
                    b.HasOne("cineVote.Models.Domain.Person", null)
                        .WithOne()
                        .HasForeignKey("cineVote.Models.Domain.Admin", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("cineVote.Models.Domain.User", b =>
                {
                    b.HasOne("cineVote.Models.Domain.Person", null)
                        .WithOne()
                        .HasForeignKey("cineVote.Models.Domain.User", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("cineVote.Models.Domain.Competition", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Nominees");
                });

            modelBuilder.Entity("cineVote.Models.Domain.Nominee", b =>
                {
                    b.Navigation("CategoryNominees");

                    b.Navigation("NomineeCompetitions");
                });

            modelBuilder.Entity("cineVote.Models.Domain.Notification", b =>
                {
                    b.Navigation("SubscriptionNotifications");
                });

            modelBuilder.Entity("cineVote.Models.Domain.Posts", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("cineVote.Models.Domain.Subscription", b =>
                {
                    b.Navigation("SubscriptionNotifications");
                });

            modelBuilder.Entity("cineVote.Models.Domain.Admin", b =>
                {
                    b.Navigation("competitions");
                });

            modelBuilder.Entity("cineVote.Models.Domain.User", b =>
                {
                    b.Navigation("followings");

                    b.Navigation("subscritions");

                    b.Navigation("votes");
                });
#pragma warning restore 612, 618
        }
    }
}
